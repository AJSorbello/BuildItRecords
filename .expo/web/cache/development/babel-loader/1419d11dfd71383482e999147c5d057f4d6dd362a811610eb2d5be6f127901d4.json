{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ReleaseCard from \"./ReleaseCard\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ReleasesGrid = function ReleasesGrid(_ref) {\n  var releases = _ref.releases,\n    label = _ref.label;\n  var filteredReleases = releases.filter(function (release) {\n    return release.label === label;\n  });\n  var sortedReleases = _toConsumableArray(filteredReleases).sort(function (a, b) {\n    return new Date(b.releaseDate).getTime() - new Date(a.releaseDate).getTime();\n  });\n  var latestRelease = sortedReleases[0];\n  var priorReleases = sortedReleases.slice(1, 21);\n  return _jsxs(ScrollView, {\n    style: styles.container,\n    children: [latestRelease && _jsx(View, {\n      style: styles.latestReleaseContainer,\n      children: _jsx(ReleaseCard, {\n        title: latestRelease.title,\n        artist: latestRelease.artist,\n        artwork: latestRelease.artwork,\n        releaseDate: latestRelease.releaseDate,\n        genre: latestRelease.genre,\n        beatportLink: latestRelease.beatportLink,\n        spotifyLink: latestRelease.spotifyLink,\n        tracks: latestRelease.tracks,\n        label: label,\n        isLatestRelease: true\n      })\n    }), _jsx(View, {\n      style: styles.priorReleasesContainer,\n      children: priorReleases.map(function (release) {\n        return _jsx(ReleaseCard, {\n          title: release.title,\n          artist: release.artist,\n          artwork: release.artwork,\n          releaseDate: release.releaseDate,\n          genre: release.genre,\n          beatportLink: release.beatportLink,\n          spotifyLink: release.spotifyLink,\n          tracks: release.tracks,\n          label: label,\n          isLatestRelease: false\n        }, release.id);\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#121212'\n  },\n  latestReleaseContainer: {\n    padding: 20,\n    marginBottom: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#333'\n  },\n  priorReleasesContainer: {\n    paddingHorizontal: 20\n  }\n});\nexport default ReleasesGrid;","map":{"version":3,"names":["React","View","StyleSheet","ScrollView","ReleaseCard","jsx","_jsx","jsxs","_jsxs","ReleasesGrid","_ref","releases","label","filteredReleases","filter","release","sortedReleases","_toConsumableArray","sort","a","b","Date","releaseDate","getTime","latestRelease","priorReleases","slice","style","styles","container","children","latestReleaseContainer","title","artist","artwork","genre","beatportLink","spotifyLink","tracks","isLatestRelease","priorReleasesContainer","map","id","create","flex","backgroundColor","padding","marginBottom","borderBottomWidth","borderBottomColor","paddingHorizontal"],"sources":["/Users/ajsorbello/Documents/MyWebPortfolio/builditrecords/src/components/ReleasesGrid.tsx"],"sourcesContent":["import React from 'react';\nimport { View, StyleSheet, ScrollView } from 'react-native';\nimport ReleaseCard from './ReleaseCard';\n\ninterface Track {\n  id: string;\n  title: string;\n  artist: string;\n  duration: string;\n  spotifyId?: string;\n  previewUrl?: string;\n}\n\ninterface Release {\n  id: string;\n  title: string;\n  artist: string;\n  artwork: string;\n  releaseDate: string;\n  genre: string;\n  beatportLink?: string;\n  spotifyLink?: string;\n  tracks: Track[];\n  label: 'records' | 'tech' | 'deep';\n}\n\ninterface ReleasesGridProps {\n  releases: Release[];\n  label: 'records' | 'tech' | 'deep';\n}\n\nconst ReleasesGrid: React.FC<ReleasesGridProps> = ({ releases, label }) => {\n  const filteredReleases = releases.filter(release => release.label === label);\n  \n  // Sort releases by date (newest first)\n  const sortedReleases = [...filteredReleases].sort((a, b) => \n    new Date(b.releaseDate).getTime() - new Date(a.releaseDate).getTime()\n  );\n\n  // Get latest release and prior releases\n  const latestRelease = sortedReleases[0];\n  const priorReleases = sortedReleases.slice(1, 21); // Get up to 20 prior releases\n\n  return (\n    <ScrollView style={styles.container}>\n      {latestRelease && (\n        <View style={styles.latestReleaseContainer}>\n          <ReleaseCard\n            title={latestRelease.title}\n            artist={latestRelease.artist}\n            artwork={latestRelease.artwork}\n            releaseDate={latestRelease.releaseDate}\n            genre={latestRelease.genre}\n            beatportLink={latestRelease.beatportLink}\n            spotifyLink={latestRelease.spotifyLink}\n            tracks={latestRelease.tracks}\n            label={label}\n            isLatestRelease={true}\n          />\n        </View>\n      )}\n\n      <View style={styles.priorReleasesContainer}>\n        {priorReleases.map((release) => (\n          <ReleaseCard\n            key={release.id}\n            title={release.title}\n            artist={release.artist}\n            artwork={release.artwork}\n            releaseDate={release.releaseDate}\n            genre={release.genre}\n            beatportLink={release.beatportLink}\n            spotifyLink={release.spotifyLink}\n            tracks={release.tracks}\n            label={label}\n            isLatestRelease={false}\n          />\n        ))}\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#121212',\n  },\n  latestReleaseContainer: {\n    padding: 20,\n    marginBottom: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#333',\n  },\n  priorReleasesContainer: {\n    paddingHorizontal: 20,\n  },\n});\n\nexport default ReleasesGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}