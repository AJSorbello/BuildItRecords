{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport axios from 'axios';\nimport { encode as base64Encode } from 'base-64';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET } from '@env';\nvar SpotifyService = function () {\n  function SpotifyService() {\n    _classCallCheck(this, SpotifyService);\n    this.accessToken = null;\n    this.tokenExpiration = 0;\n  }\n  return _createClass(SpotifyService, [{\n    key: \"getAccessToken\",\n    value: function () {\n      var _getAccessToken = _asyncToGenerator(function* () {\n        try {\n          if (this.accessToken && Date.now() < this.tokenExpiration) {\n            return this.accessToken;\n          }\n          var storedToken = yield AsyncStorage.getItem('spotify_access_token');\n          var storedExpiration = yield AsyncStorage.getItem('spotify_token_expiration');\n          if (storedToken && storedExpiration && Date.now() < parseInt(storedExpiration)) {\n            this.accessToken = storedToken;\n            this.tokenExpiration = parseInt(storedExpiration);\n            return storedToken;\n          }\n          var auth = base64Encode(`${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`);\n          var response = yield axios.post('https://accounts.spotify.com/api/token', 'grant_type=client_credentials', {\n            headers: {\n              Authorization: `Basic ${auth}`,\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }\n          });\n          this.accessToken = response.data.access_token;\n          this.tokenExpiration = Date.now() + response.data.expires_in * 1000;\n          yield AsyncStorage.setItem('spotify_access_token', this.accessToken);\n          yield AsyncStorage.setItem('spotify_token_expiration', this.tokenExpiration.toString());\n          return this.accessToken;\n        } catch (error) {\n          console.error('Error getting Spotify access token:', error);\n          throw error;\n        }\n      });\n      function getAccessToken() {\n        return _getAccessToken.apply(this, arguments);\n      }\n      return getAccessToken;\n    }()\n  }, {\n    key: \"searchByISRC\",\n    value: function () {\n      var _searchByISRC = _asyncToGenerator(function* (isrc) {\n        try {\n          var token = yield this.getAccessToken();\n          var response = yield axios.get(`https://api.spotify.com/v1/search?q=isrc:${isrc}&type=track`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          var tracks = response.data.tracks.items;\n          return tracks.length > 0 ? tracks[0] : null;\n        } catch (error) {\n          console.error('Error searching Spotify by ISRC:', error);\n          return null;\n        }\n      });\n      function searchByISRC(_x) {\n        return _searchByISRC.apply(this, arguments);\n      }\n      return searchByISRC;\n    }()\n  }, {\n    key: \"searchByUPC\",\n    value: function () {\n      var _searchByUPC = _asyncToGenerator(function* (upc) {\n        try {\n          var token = yield this.getAccessToken();\n          var response = yield axios.get(`https://api.spotify.com/v1/search?q=upc:${upc}&type=album`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          var albums = response.data.albums.items;\n          if (albums.length > 0) {\n            var albumTracks = yield axios.get(`https://api.spotify.com/v1/albums/${albums[0].id}/tracks`, {\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            });\n            return albumTracks.data.items[0] || null;\n          }\n          return null;\n        } catch (error) {\n          console.error('Error searching Spotify by UPC:', error);\n          return null;\n        }\n      });\n      function searchByUPC(_x2) {\n        return _searchByUPC.apply(this, arguments);\n      }\n      return searchByUPC;\n    }()\n  }, {\n    key: \"getTrackPreview\",\n    value: function () {\n      var _getTrackPreview = _asyncToGenerator(function* (trackId) {\n        try {\n          var token = yield this.getAccessToken();\n          var response = yield axios.get(`https://api.spotify.com/v1/tracks/${trackId}`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          return response.data.preview_url;\n        } catch (error) {\n          console.error('Error getting track preview:', error);\n          return null;\n        }\n      });\n      function getTrackPreview(_x3) {\n        return _getTrackPreview.apply(this, arguments);\n      }\n      return getTrackPreview;\n    }()\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!SpotifyService.instance) {\n        SpotifyService.instance = new SpotifyService();\n      }\n      return SpotifyService.instance;\n    }\n  }]);\n}();\nexport default SpotifyService;","map":{"version":3,"names":["axios","encode","base64Encode","AsyncStorage","SPOTIFY_CLIENT_ID","SPOTIFY_CLIENT_SECRET","SpotifyService","_classCallCheck","accessToken","tokenExpiration","_createClass","key","value","_getAccessToken","_asyncToGenerator","Date","now","storedToken","getItem","storedExpiration","parseInt","auth","response","post","headers","Authorization","data","access_token","expires_in","setItem","toString","error","console","getAccessToken","apply","arguments","_searchByISRC","isrc","token","get","tracks","items","length","searchByISRC","_x","_searchByUPC","upc","albums","albumTracks","id","searchByUPC","_x2","_getTrackPreview","trackId","preview_url","getTrackPreview","_x3","getInstance","instance"],"sources":["/Users/ajsorbello/Documents/MyWebPortfolio/builditrecords/src/services/SpotifyService.ts"],"sourcesContent":["import axios from 'axios';\nimport { encode as base64Encode } from 'base-64';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET } from '@env';\n\ninterface SpotifyTrack {\n  id: string;\n  name: string;\n  artists: Array<{ name: string }>;\n  album: {\n    name: string;\n    images: Array<{ url: string }>;\n  };\n  external_urls: {\n    spotify: string;\n  };\n}\n\nclass SpotifyService {\n  private static instance: SpotifyService;\n  private accessToken: string | null = null;\n  private tokenExpiration: number = 0;\n\n  private constructor() {}\n\n  static getInstance(): SpotifyService {\n    if (!SpotifyService.instance) {\n      SpotifyService.instance = new SpotifyService();\n    }\n    return SpotifyService.instance;\n  }\n\n  private async getAccessToken(): Promise<string> {\n    try {\n      // Check if we have a valid cached token\n      if (this.accessToken && Date.now() < this.tokenExpiration) {\n        return this.accessToken;\n      }\n\n      // Try to get token from AsyncStorage\n      const storedToken = await AsyncStorage.getItem('spotify_access_token');\n      const storedExpiration = await AsyncStorage.getItem('spotify_token_expiration');\n      \n      if (storedToken && storedExpiration && Date.now() < parseInt(storedExpiration)) {\n        this.accessToken = storedToken;\n        this.tokenExpiration = parseInt(storedExpiration);\n        return storedToken;\n      }\n\n      // Request new token\n      const auth = base64Encode(`${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`);\n      const response = await axios.post(\n        'https://accounts.spotify.com/api/token',\n        'grant_type=client_credentials',\n        {\n          headers: {\n            Authorization: `Basic ${auth}`,\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        }\n      );\n\n      this.accessToken = response.data.access_token;\n      this.tokenExpiration = Date.now() + (response.data.expires_in * 1000);\n\n      // Cache the token\n      await AsyncStorage.setItem('spotify_access_token', this.accessToken);\n      await AsyncStorage.setItem('spotify_token_expiration', this.tokenExpiration.toString());\n\n      return this.accessToken;\n    } catch (error) {\n      console.error('Error getting Spotify access token:', error);\n      throw error;\n    }\n  }\n\n  async searchByISRC(isrc: string): Promise<SpotifyTrack | null> {\n    try {\n      const token = await this.getAccessToken();\n      const response = await axios.get(\n        `https://api.spotify.com/v1/search?q=isrc:${isrc}&type=track`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n\n      const tracks = response.data.tracks.items;\n      return tracks.length > 0 ? tracks[0] : null;\n    } catch (error) {\n      console.error('Error searching Spotify by ISRC:', error);\n      return null;\n    }\n  }\n\n  async searchByUPC(upc: string): Promise<SpotifyTrack | null> {\n    try {\n      const token = await this.getAccessToken();\n      const response = await axios.get(\n        `https://api.spotify.com/v1/search?q=upc:${upc}&type=album`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n\n      const albums = response.data.albums.items;\n      if (albums.length > 0) {\n        // Get the first track from the album\n        const albumTracks = await axios.get(\n          `https://api.spotify.com/v1/albums/${albums[0].id}/tracks`,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        );\n        return albumTracks.data.items[0] || null;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error searching Spotify by UPC:', error);\n      return null;\n    }\n  }\n\n  async getTrackPreview(trackId: string): Promise<string | null> {\n    try {\n      const token = await this.getAccessToken();\n      const response = await axios.get(\n        `https://api.spotify.com/v1/tracks/${trackId}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      return response.data.preview_url;\n    } catch (error) {\n      console.error('Error getting track preview:', error);\n      return null;\n    }\n  }\n}\n\nexport default SpotifyService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}