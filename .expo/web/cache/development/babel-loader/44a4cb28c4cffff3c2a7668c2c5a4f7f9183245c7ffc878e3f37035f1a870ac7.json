{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar SpotifyService = function () {\n  function SpotifyService(clientId, redirectUri) {\n    _classCallCheck(this, SpotifyService);\n    this.accessToken = null;\n    this.clientId = clientId;\n    this.redirectUri = redirectUri;\n  }\n  return _createClass(SpotifyService, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(function* () {\n        var token = localStorage.getItem('spotify_access_token');\n        if (token) {\n          this.accessToken = token;\n          return;\n        }\n        var hash = window.location.hash.substring(1);\n        var params = new URLSearchParams(hash);\n        if (params.has('access_token')) {\n          this.accessToken = params.get('access_token');\n          localStorage.setItem('spotify_access_token', this.accessToken);\n          window.location.hash = '';\n        }\n      });\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: \"login\",\n    value: function login() {\n      var scope = 'user-library-read user-library-modify playlist-modify-public playlist-modify-private';\n      var authUrl = new URL('https://accounts.spotify.com/authorize');\n      authUrl.searchParams.append('client_id', this.clientId);\n      authUrl.searchParams.append('response_type', 'token');\n      authUrl.searchParams.append('redirect_uri', this.redirectUri);\n      authUrl.searchParams.append('scope', scope);\n      window.location.href = authUrl.toString();\n    }\n  }, {\n    key: \"addToLibrary\",\n    value: function () {\n      var _addToLibrary = _asyncToGenerator(function* (trackId) {\n        if (!this.accessToken) {\n          throw new Error('Not authenticated with Spotify');\n        }\n        try {\n          var response = yield fetch(`https://api.spotify.com/v1/me/tracks`, {\n            method: 'PUT',\n            headers: {\n              'Authorization': `Bearer ${this.accessToken}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              ids: [trackId]\n            })\n          });\n          return response.ok;\n        } catch (error) {\n          console.error('Error adding track to library:', error);\n          return false;\n        }\n      });\n      function addToLibrary(_x) {\n        return _addToLibrary.apply(this, arguments);\n      }\n      return addToLibrary;\n    }()\n  }, {\n    key: \"addToPlaylist\",\n    value: function () {\n      var _addToPlaylist = _asyncToGenerator(function* (playlistId, trackUri) {\n        if (!this.accessToken) {\n          throw new Error('Not authenticated with Spotify');\n        }\n        try {\n          var response = yield fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${this.accessToken}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              uris: [trackUri]\n            })\n          });\n          return response.ok;\n        } catch (error) {\n          console.error('Error adding track to playlist:', error);\n          return false;\n        }\n      });\n      function addToPlaylist(_x2, _x3) {\n        return _addToPlaylist.apply(this, arguments);\n      }\n      return addToPlaylist;\n    }()\n  }, {\n    key: \"getUserPlaylists\",\n    value: function () {\n      var _getUserPlaylists = _asyncToGenerator(function* () {\n        if (!this.accessToken) {\n          throw new Error('Not authenticated with Spotify');\n        }\n        try {\n          var response = yield fetch('https://api.spotify.com/v1/me/playlists', {\n            headers: {\n              'Authorization': `Bearer ${this.accessToken}`\n            }\n          });\n          if (!response.ok) {\n            throw new Error('Failed to fetch playlists');\n          }\n          var data = yield response.json();\n          return data.items.map(function (item) {\n            return {\n              id: item.id,\n              name: item.name\n            };\n          });\n        } catch (error) {\n          console.error('Error fetching playlists:', error);\n          return [];\n        }\n      });\n      function getUserPlaylists() {\n        return _getUserPlaylists.apply(this, arguments);\n      }\n      return getUserPlaylists;\n    }()\n  }]);\n}();\nexport default SpotifyService;","map":{"version":3,"names":["SpotifyService","clientId","redirectUri","_classCallCheck","accessToken","_createClass","key","value","_initialize","_asyncToGenerator","token","localStorage","getItem","hash","window","location","substring","params","URLSearchParams","has","get","setItem","initialize","apply","arguments","login","scope","authUrl","URL","searchParams","append","href","toString","_addToLibrary","trackId","Error","response","fetch","method","headers","body","JSON","stringify","ids","ok","error","console","addToLibrary","_x","_addToPlaylist","playlistId","trackUri","uris","addToPlaylist","_x2","_x3","_getUserPlaylists","data","json","items","map","item","id","name","getUserPlaylists"],"sources":["/Users/ajsorbello/Documents/MyWebPortfolio/builditrecords/src/services/SpotifyService.ts"],"sourcesContent":["class SpotifyService {\n  private clientId: string;\n  private redirectUri: string;\n  private accessToken: string | null = null;\n\n  constructor(clientId: string, redirectUri: string) {\n    this.clientId = clientId;\n    this.redirectUri = redirectUri;\n  }\n\n  async initialize(): Promise<void> {\n    // Check if we already have a token in localStorage\n    const token = localStorage.getItem('spotify_access_token');\n    if (token) {\n      this.accessToken = token;\n      return;\n    }\n\n    // If no token, and we have a hash in the URL, extract the token\n    const hash = window.location.hash.substring(1);\n    const params = new URLSearchParams(hash);\n    if (params.has('access_token')) {\n      this.accessToken = params.get('access_token');\n      localStorage.setItem('spotify_access_token', this.accessToken!);\n      // Clear the hash from the URL\n      window.location.hash = '';\n    }\n  }\n\n  login(): void {\n    const scope = 'user-library-read user-library-modify playlist-modify-public playlist-modify-private';\n    const authUrl = new URL('https://accounts.spotify.com/authorize');\n    authUrl.searchParams.append('client_id', this.clientId);\n    authUrl.searchParams.append('response_type', 'token');\n    authUrl.searchParams.append('redirect_uri', this.redirectUri);\n    authUrl.searchParams.append('scope', scope);\n    \n    window.location.href = authUrl.toString();\n  }\n\n  async addToLibrary(trackId: string): Promise<boolean> {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated with Spotify');\n    }\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/tracks`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ids: [trackId] }),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Error adding track to library:', error);\n      return false;\n    }\n  }\n\n  async addToPlaylist(playlistId: string, trackUri: string): Promise<boolean> {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated with Spotify');\n    }\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ uris: [trackUri] }),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Error adding track to playlist:', error);\n      return false;\n    }\n  }\n\n  async getUserPlaylists(): Promise<Array<{ id: string; name: string }>> {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated with Spotify');\n    }\n\n    try {\n      const response = await fetch('https://api.spotify.com/v1/me/playlists', {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch playlists');\n      }\n\n      const data = await response.json();\n      return data.items.map((item: any) => ({\n        id: item.id,\n        name: item.name,\n      }));\n    } catch (error) {\n      console.error('Error fetching playlists:', error);\n      return [];\n    }\n  }\n}\n\nexport default SpotifyService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}